[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "db_config",
        "importPath": "config_source",
        "description": "config_source",
        "isExtraImport": true,
        "detail": "config_source",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "db_config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db_config_destination",
        "kind": 5,
        "importPath": "config_destination",
        "description": "config_destination",
        "peekOfCode": "db_config_destination = {\n    'host': os.getenv('DB_HOST'),\n    'user': os.getenv('DB_USER'),\n    'password': os.getenv('DB_PASSWORD'),\n    'database': os.getenv('DB_NAME2')\n}",
        "detail": "config_destination",
        "documentation": {}
    },
    {
        "label": "db_config",
        "kind": 5,
        "importPath": "config_source",
        "description": "config_source",
        "peekOfCode": "db_config = {\n    'host': os.getenv('DB_HOST'),\n    'user': os.getenv('DB_USER'),\n    'password': os.getenv('DB_PASSWORD'),\n    'database': os.getenv('DB_NAME')\n}",
        "detail": "config_source",
        "documentation": {}
    },
    {
        "label": "db_config",
        "kind": 5,
        "importPath": "config_template",
        "description": "config_template",
        "peekOfCode": "db_config = mysql.connector.connect(\n                host=\"localhost\",\n                user=\"root\",\n                password=\"new_password\",\n                database=\"million_songs\"\n            )",
        "detail": "config_template",
        "documentation": {}
    },
    {
        "label": "clear_console",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def clear_console():\n    if os.name == 'nt':\n        _ = os.system('clear')\ndef connect_to_database():\n    return mysql.connector.connect(**db_config)\ndef fetch_data_from_database(connection, limit=1000):\n    cursor = connection.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM songs ORDER BY RAND() LIMIT %s\", (limit,))\n    return cursor.fetchall()\ndef generate_random_events(num_events):",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "connect_to_database",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def connect_to_database():\n    return mysql.connector.connect(**db_config)\ndef fetch_data_from_database(connection, limit=1000):\n    cursor = connection.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM songs ORDER BY RAND() LIMIT %s\", (limit,))\n    return cursor.fetchall()\ndef generate_random_events(num_events):\n    events = []\n    event_types = {\"streamed song\": 65,\n                   \"added to playlist\": 10,",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "fetch_data_from_database",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def fetch_data_from_database(connection, limit=1000):\n    cursor = connection.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM songs ORDER BY RAND() LIMIT %s\", (limit,))\n    return cursor.fetchall()\ndef generate_random_events(num_events):\n    events = []\n    event_types = {\"streamed song\": 65,\n                   \"added to playlist\": 10,\n                   \"removed from playlist\":5,\n                   \"liked song\": 15,",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "generate_random_events",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def generate_random_events(num_events):\n    events = []\n    event_types = {\"streamed song\": 65,\n                   \"added to playlist\": 10,\n                   \"removed from playlist\":5,\n                   \"liked song\": 15,\n                   \"disliked song\": 5\n                   }\n    age_distribution = {\n        \"18-24 years old\": 30,",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def create_folder(base_path):\n    folder_count = 1\n    while True:\n        folder_name = f\"folder_{folder_count:03d}\"\n        folder_path = os.path.join(base_path, folder_name)\n        if not os.path.exists(folder_path):\n            os.makedirs(folder_path)\n            return folder_path\n        folder_count += 1\ndef combine_data_and_events(data, events):",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "combine_data_and_events",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def combine_data_and_events(data, events):\n    combined = []\n    for record in data:\n        record_events = random.sample(events, random.randint(1, min(5, len(events))))  # Limit to max 5 events per record\n        combined.append({\n            \"record\": record,\n            \"events\": record_events\n        })\n    return combined\ndef write_to_sql_file(data, filename):",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "write_to_sql_file",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def write_to_sql_file(data, filename):\n    with open(filename, 'w') as sql_file:\n        # Write CREATE TABLE statement for the combined events table\n        sql_file.write(\"\"\"\nCREATE TABLE IF NOT EXISTS events (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    event_type VARCHAR(50),\n    timestamp DATETIME,\n    user_id INT,\n    user_name VARCHAR(255),",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "run_simulation",
        "kind": 2,
        "importPath": "eventism copy",
        "description": "eventism copy",
        "peekOfCode": "def run_simulation():\n    base_path = \"simulation_data\"\n    if not os.path.exists(base_path):\n        os.makedirs(base_path)\n    current_folder = create_folder(base_path)\n    file_count = 0\n    total_iterations = 1 * 30  # 1 hours * 30 files per hour\n    connection = connect_to_database()\n    for i in range(total_iterations):\n        clear_console()",
        "detail": "eventism copy",
        "documentation": {}
    },
    {
        "label": "clear_console",
        "kind": 2,
        "importPath": "retrieve_sim",
        "description": "retrieve_sim",
        "peekOfCode": "def clear_console():\n    if os.name == 'nt':\n        _ = os.system('clear')\n# Function to get random data from MySQL\ndef get_random_data():\n    try:\n        conn = mysql.connector.connect(**db_config)\n        cursor = conn.cursor(dictionary=True)\n        query = \"\"\"\n        SELECT `track_id`, `title`, `song_id`, `release`, `artist_id`, `artist_mbid`, ",
        "detail": "retrieve_sim",
        "documentation": {}
    },
    {
        "label": "get_random_data",
        "kind": 2,
        "importPath": "retrieve_sim",
        "description": "retrieve_sim",
        "peekOfCode": "def get_random_data():\n    try:\n        conn = mysql.connector.connect(**db_config)\n        cursor = conn.cursor(dictionary=True)\n        query = \"\"\"\n        SELECT `track_id`, `title`, `song_id`, `release`, `artist_id`, `artist_mbid`, \n               `artist_name`, `duration`, `artist_familiarity`, `artist_hotttnesss`, \n               `year`, `track_7digitalid`\n        FROM songs\n        ORDER BY RAND()",
        "detail": "retrieve_sim",
        "documentation": {}
    },
    {
        "label": "simulate_listen_event",
        "kind": 2,
        "importPath": "retrieve_sim",
        "description": "retrieve_sim",
        "peekOfCode": "def simulate_listen_event(track):\n    print(f\"Simulated listen event for track: {track['title']} by {track['artist_name']}\")\n# Main simulation loop\ndef run_simulation():\n    for i in range(5):  # 5 iterations = 10 minutes\n        clear_console()\n        print(f\"Iteration {i+1} - Time: {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        df = get_random_data()\n        if not df.empty:\n            print(df)",
        "detail": "retrieve_sim",
        "documentation": {}
    },
    {
        "label": "run_simulation",
        "kind": 2,
        "importPath": "retrieve_sim",
        "description": "retrieve_sim",
        "peekOfCode": "def run_simulation():\n    for i in range(5):  # 5 iterations = 10 minutes\n        clear_console()\n        print(f\"Iteration {i+1} - Time: {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        df = get_random_data()\n        if not df.empty:\n            print(df)\n            # Simulate a listen event for each track\n            for _, track in df.iterrows():\n                simulate_listen_event(track)",
        "detail": "retrieve_sim",
        "documentation": {}
    }
]